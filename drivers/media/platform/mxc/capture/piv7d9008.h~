/*
 * Copyright 2014 Synexxus, Inc. All Rights Reserved.
 */

/*
 * The code contained herein is licensed under the GNU General Public
 * License. You may obtain a copy of the GNU General Public License
 * Version 2 or later at the following locations:
 *
 * http://www.opensource.org/licenses/gpl-license.html
 * http://www.gnu.org/copyleft/gpl.html
 */

/*!
 * @defgroup MXC_V4L2_CAPTURE MXC V4L2 Video Capture Driver
 */
/*!
 * @file piv7d9008.h
 *
 * @brief piv7d9008 Device Driver Header File for i.MX devices
 *
 *
 * @ingroup camera
 */

#ifndef _PIVD9008_
#define _PIVD9008_

	#include <linux/clk.h>
	#include <linux/delay.h>
	#include <linux/device.h>
	#include <linux/i2c.h>
	#include <linux/init.h>
	#include <linux/module.h>
	#include <linux/of_device.h>
	#include <linux/of_gpio.h>
	#include <linux/pinctrl/consumer.h>
	#include <linux/regulator/consumer.h>
	#include <media/v4l2-chip-ident.h>
	#include <media/v4l2-int-device.h>
	#include <linux/v4l2-dv-timings.h>
	#include "mxc_v4l2_capture.h"

	#include "./../../../../mxc/ipu3/ipu_regs.h"
	#include "./../../../../mxc/ipu3/ipu_prv.h"

/* ***************************************************************************
 *  COMPILER PREPROCESSOR SETUP FUNCTION MACROS
 * ***************************************************************************/
/*!
 * \def INTCAT(x,y)
 * Concatenates two items
 */
#define INTCAT(x,y)                     x##y

/*!
 * \def INTEVAL(x,y)
 * Concatenates two items together to allow two strings together
 */
#define INTEVAL(x,y)                    INTCAT(x,y)

/*!
 * \def _INT_PRIORITY_LEVEL(x)
 * Given a macro priority level, this will expand correctly for the __ISR() routines
 */
#define _INT_PRIORITY_LEVEL(x)          INTEVAL(INT_PRIORITY_LEVEL_,x)

/*!
 * \def _INT_SUB_PRIORITY_LEVEL(x)
 * Given a macro priority level, this will expand correctly for the __ISR() routines
 */
#define _INT_SUB_PRIORITY_LEVEL(x)      INTEVAL(INT_SUB_PRIORITY_LEVEL_,x)

/*!
 * \def PASTE(x,y)
 */
#define PASTE(x,y)                      x##y

/*!
 * \def TRIPLE(x,y,z)
 */
#define TRIPLE(x,y,z)                   x##y##z

/***********************************************************************
 * Useful Definitions
 ***********************************************************************/
	#define PIV7D9008_VOLTAGE_ANALOG               	3300000	//in uV
	#define PIV7D9008_VOLTAGE_DIGITAL_CORE         	1000000
	#define PIV7D9008_VOLTAGE_DIGITAL_IO           	3300000
	#define PIV7D9008_VOLTAGE_PLL                  	3300000

	#define PIV7D9008_fsc				(27000000)		// Master clock of Chip in Hz

	#define PIV7D9008_XCLK_MIN			(27000000)
	#define PIV7D9008_XCLK_MAX			(108000000)

	#define MIN_FPS 25
	#define MAX_FPS 30
	#define DEFAULT_FPS 	(MIN_FPS)

	#define HL_VID_INPUT_CH		(3)
/***********************************************************************
 * Register Map Definitions
 ***********************************************************************/
	#define PIV7D9008_IO_MAP_I2C_ADDR			0x50	// address 0x20
	#define PIV7D9008_DEFAULT_IO_MAP_I2C_ADDR			(PIV7D9008_IO_MAP_I2C_ADDR >> 1)	// address 0x20

	#define PIV7D9008_PAGE(x)          		((x > 3) ? 1 : 0)				// If (ch_x) > 3 then it is on PAGE1 instead of PAGE0

	/* 	REGISTER				OFFSET	*/
	#define PIV7D9008_REG_VIDEO_STATUS_CH_0		(0x00)
	#define PIV7D9008_REG_VIDEO_STATUS_CH_1		(0x10)
	#define PIV7D9008_REG_VIDEO_STATUS_CH_2		(0x20)
	#define PIV7D9008_REG_VIDEO_STATUS_CH_3		(0x30)
	#define PIV7D9008_REG_VIDEO_STATUS_CH_4		(0x00)
	#define PIV7D9008_REG_VIDEO_STATUS_CH_5		(0x10)
	#define PIV7D9008_REG_VIDEO_STATUS_CH_6		(0x20)
	#define PIV7D9008_REG_VIDEO_STATUS_CH_7		(0x30)
	#define PIV7D9008_VIDEO_STATUS(x)          	( (x > 3) ? INTEVAL(PIV7D9008_REG_VIDEO_STATUS_CH_,x-4) : INTEVAL(PIV7D9008_REG_VIDEO_STATUS_CH_,x) ) 


	#define PIV7D9008_REG_BRIGHTNESS_CH_0		PIV7D9008_VIDEO_STATUS(0) + 1
	#define PIV7D9008_REG_BRIGHTNESS_CH_1		PIV7D9008_VIDEO_STATUS(1) + 1
	#define PIV7D9008_REG_BRIGHTNESS_CH_2		PIV7D9008_VIDEO_STATUS(2) + 1
	#define PIV7D9008_REG_BRIGHTNESS_CH_3		PIV7D9008_VIDEO_STATUS(3) + 1
	#define PIV7D9008_REG_BRIGHTNESS_CH_4		(0x01)
	#define PIV7D9008_REG_BRIGHTNESS_CH_5		(0x11)
	#define PIV7D9008_REG_BRIGHTNESS_CH_6		(0x21)
	#define PIV7D9008_REG_BRIGHTNESS_CH_7		(0x31)
	#define PIV7D9008_BRIGHTNESS(x)          	( (x > 3) ? INTEVAL(PIV7D9008_REG_BRIGHTNESS_CH_,x-4) : INTEVAL(PIV7D9008_REG_BRIGHTNESS_CH_,x) )

	#define PIV7D9008_REG_CONTRAST_CH_0		PIV7D9008_VIDEO_STATUS(0) + 2
	#define PIV7D9008_REG_CONTRAST_CH_1		PIV7D9008_VIDEO_STATUS(1) + 2
	#define PIV7D9008_REG_CONTRAST_CH_2		PIV7D9008_VIDEO_STATUS(2) + 2
	#define PIV7D9008_REG_CONTRAST_CH_3		PIV7D9008_VIDEO_STATUS(3) + 2
	#define PIV7D9008_REG_CONTRAST_CH_4		(0x02)
	#define PIV7D9008_REG_CONTRAST_CH_5		(0x12)
	#define PIV7D9008_REG_CONTRAST_CH_6		(0x22)
	#define PIV7D9008_REG_CONTRAST_CH_7		(0x32)
	#define PIV7D9008_CONTRAST(x)          		( (x > 3) ? INTEVAL(PIV7D9008_REG_CONTRAST_CH_,x-4) : INTEVAL(PIV7D9008_REG_CONTRAST_CH_,x) )

	#define PIV7D9008_REG_SHARPNESS_CH_0		PIV7D9008_VIDEO_STATUS(0) + 3
	#define PIV7D9008_REG_SHARPNESS_CH_1		PIV7D9008_VIDEO_STATUS(1) + 3
	#define PIV7D9008_REG_SHARPNESS_CH_2		PIV7D9008_VIDEO_STATUS(2) + 3
	#define PIV7D9008_REG_SHARPNESS_CH_3		PIV7D9008_VIDEO_STATUS(3) + 3
	#define PIV7D9008_REG_SHARPNESS_CH_4		(0x03)
	#define PIV7D9008_REG_SHARPNESS_CH_5		(0x13)
	#define PIV7D9008_REG_SHARPNESS_CH_6		(0x23)
	#define PIV7D9008_REG_SHARPNESS_CH_7		(0x33)
	#define PIV7D9008_SHARPNESS(x)          	( (x > 3) ? INTEVAL(PIV7D9008_REG_SHARPNESS_CH_,x-4) : INTEVAL(PIV7D9008_REG_SHARPNESS_CH_,x) )

	#define PIV7D9008_REG_CHROMA_U_CH_0		PIV7D9008_VIDEO_STATUS(0) + 4
	#define PIV7D9008_REG_CHROMA_U_CH_1		PIV7D9008_VIDEO_STATUS(1) + 4
	#define PIV7D9008_REG_CHROMA_U_CH_2		PIV7D9008_VIDEO_STATUS(2) + 4
	#define PIV7D9008_REG_CHROMA_U_CH_3		PIV7D9008_VIDEO_STATUS(3) + 4
	#define PIV7D9008_REG_CHROMA_U_CH_4		(0x04)
	#define PIV7D9008_REG_CHROMA_U_CH_5		(0x14)
	#define PIV7D9008_REG_CHROMA_U_CH_6		(0x24)
	#define PIV7D9008_REG_CHROMA_U_CH_7		(0x34)
	#define PIV7D9008_CHROMA_U(x)          		( (x > 3) ? INTEVAL(PIV7D9008_REG_CHROMA_U_CH_,x-4) : INTEVAL(PIV7D9008_REG_CHROMA_U_CH_,x) )

	#define PIV7D9008_REG_CHROMA_V_CH_0		(0x05)
	#define PIV7D9008_REG_CHROMA_V_CH_1		(0x15)
	#define PIV7D9008_REG_CHROMA_V_CH_2		(0x25)
	#define PIV7D9008_REG_CHROMA_V_CH_3		(0x35)
	#define PIV7D9008_REG_CHROMA_V_CH_4		(0x05)
	#define PIV7D9008_REG_CHROMA_V_CH_5		(0x15)
	#define PIV7D9008_REG_CHROMA_V_CH_6		(0x25)
	#define PIV7D9008_REG_CHROMA_V_CH_7		(0x35)
	#define PIV7D9008_CHROMA_V(x)          		( (x > 3) ? INTEVAL(PIV7D9008_REG_CHROMA_V_CH_,x-4) : INTEVAL(PIV7D9008_REG_CHROMA_V_CH_,x) )

	#define PIV7D9008_REG_HUE_CH_0			(0x06)
	#define PIV7D9008_REG_HUE_CH_1			(0x16)
	#define PIV7D9008_REG_HUE_CH_2			(0x26)
	#define PIV7D9008_REG_HUE_CH_3			(0x36)
	#define PIV7D9008_REG_HUE_CH_4			(0x06)
	#define PIV7D9008_REG_HUE_CH_5			(0x16)
	#define PIV7D9008_REG_HUE_CH_6			(0x26)
	#define PIV7D9008_REG_HUE_CH_7			(0x36)
	#define PIV7D9008_HUE(x)          		( (x > 3) ? INTEVAL(PIV7D9008_REG_HUE_CH_,x-4) : INTEVAL(PIV7D9008_REG_HUE_CH_,x) )

	#define PIV7D9008_REG_H_DELAY_CH_0		PIV7D9008_VIDEO_STATUS(0) + 0x0A
	#define PIV7D9008_REG_H_DELAY_CH_1		PIV7D9008_VIDEO_STATUS(1) + 0x0A
	#define PIV7D9008_REG_H_DELAY_CH_2		PIV7D9008_VIDEO_STATUS(2) + 0x0A
	#define PIV7D9008_REG_H_DELAY_CH_3		PIV7D9008_VIDEO_STATUS(3) + 0x0A
	#define PIV7D9008_H_DELAY(x)          		( (x > 3) ? INTEVAL(PIV7D9008_REG_H_DELAY_CH_,x-4) : INTEVAL(PIV7D9008_REG_H_DELAY_CH_,x) )

	#define PIV7D9008_REG_STD_SEL_CH_0		PIV7D9008_VIDEO_STATUS(0) + 0x0E
	#define PIV7D9008_REG_STD_SEL_CH_1		PIV7D9008_VIDEO_STATUS(1) + 0x0E
	#define PIV7D9008_REG_STD_SEL_CH_2		PIV7D9008_VIDEO_STATUS(2) + 0x0E
	#define PIV7D9008_REG_STD_SEL_CH_3		PIV7D9008_VIDEO_STATUS(3) + 0x0E
	#define PIV7D9008_STD_SEL(x)          		( (x > 3) ? INTEVAL(PIV7D9008_REG_STD_SEL_CH_,x-4) : INTEVAL(PIV7D9008_REG_STD_SEL_CH_,x) )

	#define	PIV7D9008_REG_PAGE_SEL			0x40

	#define PIV7D9008_FBITINV(x)          		( (x > 3) ? 0x51 : 0x51 )
	#define PIV7D9008_HBLEN_H(x)          		( (x > 3) ? 0x56 : 0x56 )

	#define PIV7D9008_REG_HBLEN_L_CH_0		0x57
	#define PIV7D9008_REG_HBLEN_L_CH_1		0x58
	#define PIV7D9008_REG_HBLEN_L_CH_2		0x59
	#define PIV7D9008_REG_HBLEN_L_CH_3		0x5A
	#define PIV7D9008_HBLEN_L(x)          		( (x > 3) ? INTEVAL(PIV7D9008_REG_HBLEN_L_CH_,x-4) : INTEVAL(PIV7D9008_REG_HBLEN_L_CH_,x) )

	#define PIV7D9008_REG_COLOR_KILL_CH_0			0x96
	#define PIV7D9008_REG_COLOR_KILL_CH_1			0x5D
	#define PIV7D9008_REG_COLOR_KILL_CH_2			0x5E
	#define PIV7D9008_REG_COLOR_KILL_CH_3			0x5F
	#define PIV7D9008_COLOR_KILL(x)          	( (x > 3) ? INTEVAL(PIV7D9008_REG_COLOR_KILL_CH_,x-4) : INTEVAL(PIV7D9008_REG_COLOR_KILL_CH_,x) )

	#define PIV7D9008_REG_CLOCK_SEL			0x61
	#define PIV7D9008_MASK_CLOCK_SEL		0b00000011
	#define PIV7D9008_VAL_CLOCK_SEL_27		0x00
	#define PIV7D9008_VAL_CLOCK_SEL_54		0x01
	#define PIV7D9008_VAL_CLOCK_SEL_108		0x02
	#define PIV7D9008_VAL_CLOCK_SEL_27_2		0x03

	#define PIV7D9008_REG_GPIO_OE			0x62
	#define PIV7D9008_REG_ID_VID_CH_0_1		0x63
	#define PIV7D9008_REG_ID_VID_CH_2_3		0x64
	#define PIV7D9008_REG_ID_VID_CH_4_5		0x65
	#define PIV7D9008_REG_ID_VID_CH_6_7		0x66

	#define PIV7D9008_REG_HZOOM_EN			0x67
	#define PIV7D9008_REG_HZOOM_HI			0x68
	#define PIV7D9008_REG_HZOOM_LOW_0		0x69
	#define PIV7D9008_REG_HZOOM_LOW_1		0x6A
	#define PIV7D9008_REG_HZOOM_LOW_2		0x6B
	#define PIV7D9008_REG_HZOOM_LOW_3		0x6C

	#define PIV7D9008_REG_VID_OUT_EN		0x6F

	#define PIV7D9008_REG_AUD_CLK_CTRL		0x70
	#define PIV7D9008_REG_I2S_AUD_INPUT_CTRL	0x71

	#define PIV7D9008_REG_SOFTWARE_RESET		0x80
	#define PIV7D9008_MASK_SOFTWARE_RESET		0x2F

	#define PIV7D9008_REG_DELAY_PIXCLOCK_0		0x9F
	#define PIV7D9008_REG_VIDEO_STATUS_LOSS		0xB2

	#define PIV7D9008_REG_GPIO_MODE_0_1		0xC8
	#define PIV7D9008_MASK_GPIO_MODE_0		0x0F
	#define PIV7D9008_MASK_GPIO_MODE_1		0xF0

	#define PIV7D9008_REG_GPIO_MODE_2_3		0xC9
	#define PIV7D9008_MASK_GPIO_MODE_2		0x0F
	#define PIV7D9008_MASK_GPIO_MODE_3		0xF0

	#define PIV7D9008_REG_GPIO_POLARITY		0xCB
	#define PIV7D9008_MASK_GPIO_INV_7		0x80
	#define PIV7D9008_MASK_GPIO_INV_6		0x40
	#define PIV7D9008_MASK_GPIO_INV_5		0x20
	#define PIV7D9008_MASK_GPIO_INV_4		0x10
	#define PIV7D9008_MASK_GPIO_INV_3		0x08
	#define PIV7D9008_MASK_GPIO_INV_2		0x04
	#define PIV7D9008_MASK_GPIO_INV_1		0x02
	#define PIV7D9008_MASK_GPIO_INV_0		0x01

	#define PIV7D9008_REG_WD1_D1_SEL		0xCD

	#define PIV7D9008_REG_VID_OUTPUT_MODE		0xE7
	#define PIV7D9008_MASK_PIXOUT_0		0x03
	#define PIV7D9008_MASK_PIXOUT_1		0x0C
	#define PIV7D9008_MASK_PIXOUT_2		0x30
	#define PIV7D9008_MASK_PIXOUT_3		0xC0

	#define PIV7D9008_REG_OUTPUT_SEL_PIXOUT0_1_2	0xE8
	#define PIV7D9008_MASK_SEL_CH1		0x0F
	#define PIV7D9008_MASK_SEL_CH2		0xF0

	#define PIV7D9008_REG_OUTPUT_SEL_PIXOUT0_3_4	0xE9
	#define PIV7D9008_MASK_SEL_CH3		0x0F
	#define PIV7D9008_MASK_SEL_CH4		0xF0

	#define PIV7D9008_REG_OUTPUT_SEL_PIXOUT1_1_2	0xEA
	#define PIV7D9008_MASK_SEL_CH1		0x0F
	#define PIV7D9008_MASK_SEL_CH2		0xF0

	#define PIV7D9008_REG_OUTPUT_SEL_PIXOUT1_3_4	0xEB
	#define PIV7D9008_MASK_SEL_CH3		0x0F
	#define PIV7D9008_MASK_SEL_CH4		0xF0

	#define PIV7D9008_REG_OUTPUT_SEL_PIXOUT2_1_2	0xEC
	#define PIV7D9008_MASK_SEL_CH1		0x0F
	#define PIV7D9008_MASK_SEL_CH2		0xF0

	#define PIV7D9008_REG_OUTPUT_SEL_PIXOUT2_3_4	0xED
	#define PIV7D9008_MASK_SEL_CH3		0x0F
	#define PIV7D9008_MASK_SEL_CH4		0xF0

	#define PIV7D9008_REG_OUTPUT_SEL_PIXOUT3_1_2	0xEE
	#define PIV7D9008_MASK_SEL_CH1		0x0F
	#define PIV7D9008_MASK_SEL_CH2		0xF0

	#define PIV7D9008_REG_OUTPUT_SEL_PIXOUT3_3_4	0xEF
	#define PIV7D9008_MASK_SEL_CH1		0x0F
	#define PIV7D9008_MASK_SEL_CH2		0xF0

	#define PIV7D9008_REG_PIXCLK_OUTPUT_MODE	0xF9
	#define PIV7D9008_MASK_PIXCLK_OUTPUT_MODE	0x03

	#define PIV7D9008_REG_CCIR565_CTRL		0xFA
	#define PIV7D9008_REG_CLOCK_POLARITY		0xFB

	#define PIV7D9008_REG_AVDET_EN			0xFC
	#define PIV7D9008_REG_AVDET_STATUS		0xFD

	#define PIV7D9008_REG_DEVICE_ID_H		0xFE
	#define PIV7D9008_REG_DEVICE_ID_L		0xFF


/***********************************************************************
 *  Appropriate Structures for a Video Capture Device
 ***********************************************************************/
	/*! Video format structure. */
/*
	struct  video_fmt_t{
		int v4l2_id;		//!< Video for linux ID. 
		char name[16];		//!< Name (e.g., "NTSC", "PAL", etc.) 
		u16 raw_width;		//!< Raw width. 
		u16 raw_height;		//!< Raw height. 
		u16 active_width;	//!< Active width. 
		u16 active_height;	//!< Active height. 
		int frame_rate;		//!< Frame rate. 
		u16 active_top;		//!< Active top. 
		u16 active_left;	//!< Active left. 
	};
*/

	/*! List of input video formats supported. The video formats is corresponding
	 * with v4l2 id in video_fmt_t
	 */
/*
	enum video_fmt_index{
		PIV7D9008_NTSC = 0,		//!< Locked on (M) NTSC video signal. 
		PIV7D9008_PAL=1,		//!< (B, D, G, H, I)PAL video signal. 
		PIV7D9008_NV=2,			//!< Not Valid. 
		PIV7D9008_NTSC_4_43=3,		//!< (4.43)NTSC video signal. 
		PIV7D9008_PAL_M=4,		//!< (M) PAL video signal. 
		PIV7D9008_PAL_CN=5,		//!< (CN) PAL video signal. 
		PIV7D9008_PAL_60=6,		//!< (60) PAL video signal. 
		PIV7D9008_NOT_LOCKED=7,		//!< Not locked on a signal. || ALSO AUTO DETECT IF SETTING STANDARD SELECTION 
		PIV7D9008_FMT_IDX_SIZE
	};
*/

	/*! Description of video formats supported.
	 *
	 *  PAL: raw=720x625, active=720x576.
	 *  NTSC: raw=720x525, active=720x480.
	 */
	static const struct video_fmt_t video_fmts[] = {
		{			/*! NTSC */
		 .v4l2_id = V4L2_STD_NTSC,
		 .name = "NTSC",
		 .raw_width = 720,	/* SENS_FRM_WIDTH */
		 .raw_height = 525,	/* SENS_FRM_HEIGHT */
		 .active_width = 720,	/* ACT_FRM_WIDTH plus 1 */
		 .active_height = 480,	/* ACT_FRM_WIDTH plus 1 */
		 .frame_rate = 30,
	 		.active_top = 45,
	 		.active_left = 0,
		 },
		{			/*! (B, D, G, H, I) PAL */
		 .v4l2_id = V4L2_STD_PAL,
		 .name = "PAL",
		 .raw_width = 720,
		 .raw_height = 625,
		 .active_width = 720,
		 .active_height = 576,
		 .frame_rate = 25,
	 	.active_top = 0,
	 	.active_left = 0,
		 },
		{			/*! Unlocked standard */
		 .v4l2_id = V4L2_STD_UNKNOWN,
		 .name = "Invalid",
		 .raw_width = 720,
		 .raw_height = 625,
		 .active_width = 720,
		 .active_height = 576,
		 .frame_rate = 0,
	 	.active_top = 0,
	 	.active_left = 0,
		 },
		{			/*! NTSC 4.43 */
		 .v4l2_id = V4L2_STD_525_60,
		 .name = "NTSC_STD",
		 .raw_width = 720,
		 .raw_height = 525,
		 .active_width = 720,
		 .active_height = 480,
		 .frame_rate = 30,
	 	.active_top = 13,
	 	.active_left = 0,
		 },
		{
		 .v4l2_id = (V4L2_STD_PAL_M),
		 .name = "PAL_M",
		 .raw_width = 720,
		 .raw_height = 625,
		 .active_width = 720,
		 .active_height = 576,
		 .frame_rate = 25,
	 	.active_top = 0,
	 	.active_left = 0,
		 },
		{
		 .v4l2_id = (V4L2_STD_PAL_N | V4L2_STD_PAL_Nc),
		 .name = "PAL_N",
		 .raw_width = 720,
		 .raw_height = 625,
		 .active_width = 720,
		 .active_height = 576,
		 .frame_rate = 25,
	 	.active_top = 0,
	 	.active_left = 0,
		 },
		{
		 .v4l2_id = (V4L2_STD_PAL_60),
		 .name = "PAL60",
		 .raw_width = 720,
		 .raw_height = 625,
		 .active_width = 720,
		 .active_height = 576,
		 .frame_rate = 30,
	 	.active_top = 0,
	 	.active_left = 0,
		 },
		{			/*! Unlocked standard */
		 .v4l2_id = V4L2_STD_ALL,
		 .name = "Autodetect",
		 .raw_width = 720,
		 .raw_height = 625,
		 .active_width = 720,
		 .active_height = 576,
		 .frame_rate = 25,
	 	.active_top = 0,
	 	.active_left = 0,
		 },
	};

/*
	enum PIV7D9008_supported_channels{
		PIV7D9008_CHANNEL_0=0,
		PIV7D9008_CHANNEL_1=1,
		PIV7D9008_CHANNEL_2=2,
		PIV7D9008_CHANNEL_3=3,
		PIV7D9008_CHANNEL_4=4,
		PIV7D9008_CHANNEL_5=5,
		PIV7D9008_CHANNEL_6=6,
		PIV7D9008_CHANNEL_7=7,
		PIV7D9008_CHANNEL_SIZE
	};

	struct PIV7D9008_channel {
		s8 brightness;					// -128 to 127 brightness range
		s8 contrast;					// 00 to 7F
		s8 sharpness;					// 00 No effect -> 1 to 15 (15 full effect)
		s8 chroma_u;					// Chroma U Gain value
		s8 chroma_v;					// Chroma V Gain Value
		s16 saturation;
		s8 hue;						// 7F (90C) to 80 (-90C)

		u8 h_delay;					// Left Shift video output

		enum video_fmt_index curr_std;			// Current Standard read from 0x0E[6:4]
		enum video_fmt_index prev_std;			// Previous Standard read from 0x0E[6:4]
	
		u16 HZOOM;					// Horizontal Zoom Value (parsed between 0x68 and 0x69)

	};
*/
	/*
	 * Structure taken from the mxc_v4l2_capture.h and based off of sensor
	 *	Extended for PIV7D9008
	 */
/*
	struct PIV7D9008_sensor_data {
		const struct PIV7D9008_platform_data *platform_data;
		struct v4l2_int_device *v4l2_int_device;
		struct i2c_client *i2c_client;			// This is the main client
		struct v4l2_pix_format pix;
		struct v4l2_captureparm streamcap;
		bool on;

		// control settings 
		struct PIV7D9008_channel channel[PIV7D9008_CHANNEL_SIZE];

		// IPU/CSI Specific Data 
		u32 mclk;
		u8 mclk_source;
		struct clk *sensor_clk;
		u32 csi;			// csi_id
		u32 ipu_id;			// ipu_id

		void (*io_init)(void);

		// controls 
		struct v4l2_ctrl *detect_tx_5v_ctrl;
		struct v4l2_ctrl *analog_sampling_phase_ctrl;
		struct v4l2_ctrl *free_run_color_manual_ctrl;
		struct v4l2_ctrl *free_run_color_ctrl;
		struct v4l2_ctrl *rgb_quantization_range_ctrl;

		v4l2_std_id std_id;
		int pwn_gpio;
		int rst_gpio;
		int prev_sysclk;

		// Custom Additions 
		//enum PIV7D9008_mode mode;
		//enum PIV7D9008_frame_rate frate;
		//const struct PIV7D9008_video_standards *curr_vid_std;	// Pointer to the complete list of videostandards.  
		//u32 curr_vid_std_index;
		//u32 curr_vid_std_size;
	};
*/

/***********************************************************************
 *  Functions declarations
 ***********************************************************************/
	static int PIV7D9008_probe(struct i2c_client *adapter,
				 const struct i2c_device_id *id);

	static int PIV7D9008_remove(struct i2c_client *client);

	static inline void PIV7D9008_power_down(int enable);

	static inline void PIV7D9008_reset(void);
	static void PIV7D9008_soft_reset(void);

	static int PIV7D9008_get_sysclk(void);

	static int PIV7D9008_init_default_comp(void);
	static int PIV7D9008_init_default_mode(void);
	static int PIV7D9008_init_mode(void);

	static int PIV7D9008_set_video_std(u8 ch, u8 new_std);
	static int PIV7D9008_change_video_mode(int new_mode);

	static s32 PIV7D9008_cid_brightness(s32 value);
	static s32 PIV7D9008_cid_contrast(s32 value);
	static s32 PIV7D9008_cid_hue(s32 value);
	static s32 PIV7D9008_cid_saturation(s32 value);
	static int piv7d9008_write_reg(u8 reg, u8 val);
	static int piv7d9008_read_reg(u8 reg, u8 val);

	static inline int PIV7D9008_standard_select(u8 ch);

	static void PIV7D9008_get_std(v4l2_std_id *std);

	static inline int piv7d9008_read(u8 reg);

	static inline int PI7VD9008_page_select(bool page);

	static u32 __display_CSI_register_data(struct ipu_soc *ipu, u32 csi);

	static int PIV7D9008_set_comp_mode(u8 mode);

	static int PIV7D9008_update_fps(int newFPS);
#endif
