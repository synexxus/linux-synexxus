/*
 * Copyright 2014 Synexxus, Inc. 
 */

/*
 * The code contained herein is licensed under the GNU General Public
 * License. You may obtain a copy of the GNU General Public License
 * Version 2 or later at the following locations:
 *
 * http://www.opensource.org/licenses/gpl-license.html
 * http://www.gnu.org/copyleft/gpl.html
 */

/*!
 * @file mxc_PIV7D9008.c
 *
 * @brief Analog Device PIV7D9008 video decoder functions
 *
 * @ingroup Camera
 */

#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/slab.h>
#include <linux/i2c.h>
#include <linux/videodev2.h>
#include <linux/workqueue.h>

#include <linux/mfd/syscon.h>
#include <linux/mfd/syscon/imx6q-iomuxc-gpr.h>
#include <linux/of_device.h>
#include <linux/of_gpio.h>
#include <linux/regmap.h>

#include <linux/v4l2-dv-timings.h>
#include <media/v4l2-device.h>
#include <media/v4l2-ctrls.h>
#include <media/v4l2-chip-ident.h>
#include "mxc_v4l2_capture.h"

#include "piv7d9008.h"

static int debug;
module_param(debug, int, 0644);
MODULE_PARM_DESC(debug, "debug level (0-2)");

/**
	DRIVER DATA
 */
struct PIV7D9008_sensor_data PIV7D9008_data;

/*
 **********************************************************************
 *  Arrays with configuration parameters for the PIV7D9008
 *	Look in "piv7d9008.h"
 **********************************************************************
 */

/* ----------------- REGISTER DEVICE ID ----------------------------------- */
static const struct i2c_device_id PIV7D9008_id[] = {
	{"piv7d9008", 0},
	{"piv7d9008_camera", 0},
	{"PIV7D9008", 0},
	{"PIV7D9008_camera", 0},
	{},
};

MODULE_DEVICE_TABLE(i2c, PIV7D9008_id);

/* ----------------- REGISTER DEVICE I2C----------------------------------- */
static struct i2c_driver PIV7D9008_i2c_driver = {
	.driver = {
		   .owner = THIS_MODULE,
		   .name = "piv7d9008",
		   },
	.probe = PIV7D9008_probe,
	.remove = PIV7D9008_remove,
	.id_table = PIV7D9008_id,
};

//module_i2c_driver(mxc_v4l2_PIV7D9008_i2c_driver);

/*
 **********************************************************************
 *  Functions specific to the driver
 **********************************************************************
 */
static inline void PIV7D9008_power_down(int enable)
{
	(enable == 0 ) ? printk(KERN_INFO "%s: ENABLED\n",__func__) : printk(KERN_INFO "%s: DISABLED\n",__func__);;
	//if(&PIV7D9008_data.pwn_gpio != NULL)
	//	gpio_set_value(PIV7D9008_data.pwn_gpio, enable);

	msleep(10);
}

/*
 *	GPIO based reset
 */
static inline void PIV7D9008_reset(void)
{
	printk(KERN_INFO "%s: \n",__func__);
	// camera reset 
	gpio_set_value(PIV7D9008_data.rst_gpio, 1);

	msleep(100);
	gpio_set_value(PIV7D9008_data.rst_gpio, 0);
	msleep(500);
	gpio_set_value(PIV7D9008_data.rst_gpio, 1);
	msleep(500);
}

static void PIV7D9008_soft_reset(void)
{

	printk(KERN_INFO "%s: \n",__func__);

	/* delay at least 5ms */
	msleep(10);

	// Contact through I2C
	//PIV7D9008_generic_i2c_byte_write(PIV7D9008_data.i2c_client, PIV7D9008_DEFAULT_IO_MAP_I2C_ADDR, 
	//				PIV7D9008_REG_SOFTWARE_RESET,
	//				0x00 | (PIV7D9008_MASK_SOFTWARE_RESET & 0xFF));

	piv7d9008_write_reg(PIV7D9008_REG_SOFTWARE_RESET, 0x00 | (PIV7D9008_MASK_SOFTWARE_RESET & 0xFF));

	/* delay at least 100ms */
	msleep(200);
}

/* Calculate SysClk
 *  
 */
static int PIV7D9008_get_sysclk(void)
{
	return PIV7D9008_fsc;
}

static int PIV7D9008_init_default_comp(void)
{
	/*
	 * Initialize the digitizer modes
	 * 	Per PIV7D9008ABH 07212014 Reference pdf
	 */
	printk(KERN_INFO "%s: \n",__func__);
	PIV7D9008_soft_reset();
	//msleep(10);

	PI7VD9008_page_select(0);
	piv7d9008_write_reg(PIV7D9008_REG_CLOCK_SEL, 0x00);			//! Select 27Mhz output
	//piv7d9008_write_reg(PIV7D9008_REG_WD1_D1_SEL, 0x00);			//! Select all outputs for 27Mhz
	//piv7d9008_write_reg(PIV7D9008_REG_PIXCLK_OUTPUT_MODE, 0x00);		//! Select clock outputs for 27Mhz
	//piv7d9008_write_reg(0x0F, 0xFF);		//! Enable Recognition of all channels

	PI7VD9008_page_select(1);
	//msleep(10);
	piv7d9008_write_reg(0x61, 0x00);		// PI7VD9008H vs ABH has these registers mapped differently!
	piv7d9008_write_reg(0x62, 0x00);	
	piv7d9008_write_reg(0x63, 0x22);	
	piv7d9008_write_reg(0x64, 0x22);	
	piv7d9008_write_reg(0x65, 0x33);	
	piv7d9008_write_reg(0x66, 0x33);	
	piv7d9008_write_reg(0x67, 0x44);	
	piv7d9008_write_reg(0x68, 0x44);	

	PI7VD9008_page_select(0);
	//piv7d9008_write_reg(0xCB, 0x55);		// Invert VSYNC & HSYNC signal
	//piv7d9008_write_reg(0xCB, 0x44);		// Invert HSYNC signal
	//piv7d9008_write_reg(0xCB, 0x11);		// Invert HSYNC signal
	//piv7d9008_write_reg(0xCB, 0x40);		// Invert VSYNC signal
	//piv7d9008_write_reg(0xFB, 0xCF);		// Invert the Clock as well!

	//piv7d9008_write_reg(0x29, 0x01);
	piv7d9008_write_reg(0x6E, 0x00);	/* Set to D1 instead of WD1... same as WD1, D1 register I think 02/25/2015*/
/*
	piv7d9008_write_reg(PIV7D9008_REG_GPIO_MODE_0_1, 
				(0x00) | (0x00 & PIV7D9008_MASK_GPIO_MODE_0) ) ;	// Set GPIO_0 == VSYNC
	piv7d9008_write_reg(PIV7D9008_REG_GPIO_MODE_0_1, 
				(0x00) | (0x01 & PIV7D9008_MASK_GPIO_MODE_1) ) ;	// Set GPIO_0 == VSYNC
*/
	piv7d9008_write_reg(PIV7D9008_REG_GPIO_MODE_0_1, 
				(0x00) | (0x27 ) ) ;	// Set GPIO_0 == GPP_VA0, GPIO_1=FIELD
	piv7d9008_write_reg(PIV7D9008_REG_GPIO_MODE_2_3, 
				(0x00) | (0x27 ) ) ;	// Set GPIO_2 == GPP_VA2, GPIO_3=FIELD
	/*
	 * Initialize the Video Standard Portion
	 */
	//PIV7D9008_set_video_std(0, 7);
	//PIV7D9008_set_video_std(1, 7);
	//PIV7D9008_set_video_std(2, 7);
	//PIV7D9008_set_video_std(3, 7);
//	PIV7D9008_set_video_std(4, 7);
//	PIV7D9008_set_video_std(5, 7);
//	PIV7D9008_set_video_std(6, 7);
//	PIV7D9008_set_video_std(7, 7);
	PIV7D9008_change_video_mode(0x07);		// Set all to NTSC
	return piv7d9008_write_reg(PIV7D9008_REG_CCIR565_CTRL, 0x40); // All outputs on, 27M data output
	//return 0;
}

static int PIV7D9008_set_comp_mode(u8 mode){
	/*
	 * Initialize the digitizer modes
	 * 	Per PIV7D9008ABH 07212014 Reference pdf
	 */
	printk(KERN_INFO "%s: \n",__func__);
	PIV7D9008_soft_reset();

	PI7VD9008_page_select(0);
	piv7d9008_write_reg(PIV7D9008_REG_CLOCK_SEL, 0x00);			//! Select 27Mhz output
	//piv7d9008_write_reg(PIV7D9008_REG_WD1_D1_SEL, 0x00);			//! Select all outputs for 27Mhz
	//piv7d9008_write_reg(PIV7D9008_REG_PIXCLK_OUTPUT_MODE, 0x00);		//! Select clock outputs for 27Mhz
	//piv7d9008_write_reg(0x0F, 0xFF);		//! Enable Recognition of all channels


	PI7VD9008_page_select(1);
	piv7d9008_write_reg(0x60, 0x00);		//! Set Video Output Mode to single channel
	piv7d9008_write_reg(0x61, 0x00);		// PI7VD9008H vs ABH has these registers mapped differently!
	piv7d9008_write_reg(0x62, 0x00);	
	piv7d9008_write_reg(0x63, 0x00);	
	piv7d9008_write_reg(0x64, 0x00);	
	piv7d9008_write_reg(0x65, 0x33);	
	piv7d9008_write_reg(0x66, 0x33);	
	piv7d9008_write_reg(0x67, 0x44);	
	piv7d9008_write_reg(0x68, 0x44);	

	PI7VD9008_page_select(0);

	//piv7d9008_write_reg(0xCB, 0x55);		// Invert VSYNC & HSYNC signal
	//piv7d9008_write_reg(0xCB, 0x44);		// Invert HSYNC signal
	//piv7d9008_write_reg(0xCB, 0x11);		// Invert HSYNC signal
	//piv7d9008_write_reg(0xCB, 0x40);		// Invert VSYNC signal
	//piv7d9008_write_reg(0xFB, 0xCF);		// Invert the Clock as well!

	//piv7d9008_write_reg(0x29, 0x01);
	piv7d9008_write_reg(0x6E, 0x00);	/* Set to D1 instead of WD1... same as WD1, D1 register I think 02/25/2015*/
/*
	piv7d9008_write_reg(PIV7D9008_REG_GPIO_MODE_0_1, 
				(0x00) | (0x00 & PIV7D9008_MASK_GPIO_MODE_0) ) ;	// Set GPIO_0 == VSYNC
	piv7d9008_write_reg(PIV7D9008_REG_GPIO_MODE_0_1, 
				(0x00) | (0x01 & PIV7D9008_MASK_GPIO_MODE_1) ) ;	// Set GPIO_0 == VSYNC
*/
	piv7d9008_write_reg(PIV7D9008_REG_GPIO_MODE_0_1, 
				(0x00) | (0x27 ) ) ;	// Set GPIO_0 == GPP_VA0, GPIO_1=FIELD
	piv7d9008_write_reg(PIV7D9008_REG_GPIO_MODE_2_3, 
				(0x00) | (0x27 ) ) ;	// Set GPIO_2 == GPP_VA2, GPIO_3=FIELD
	/*
	 * Initialize the Video Standard Portion
	 */
	PIV7D9008_change_video_mode(mode);		// Set all to NTSC
	return piv7d9008_write_reg(PIV7D9008_REG_CCIR565_CTRL, 0x40); // All outputs on, 27M data output
}

static inline int PIV7D9008_standard_select(u8 ch){
	switch (ch){
		default:
		case 4:
		case 0:
			return PIV7D9008_REG_STD_SEL_CH_0;
			break;
		case 1:
		case 5:
			return PIV7D9008_REG_STD_SEL_CH_1;
			break;
		case 2:
		case 6:
			return PIV7D9008_REG_STD_SEL_CH_2;
			break;
		case 3:
		case 7:
			return PIV7D9008_REG_STD_SEL_CH_3;
			break;
	}
}

static inline int PI7VD9008_page_select(bool page){
	/*
		Input is either 0 or 1
	 */
	piv7d9008_write_reg(PIV7D9008_REG_PAGE_SEL, page);
	msleep(10);
	return page;
}

static int PIV7D9008_set_video_std(u8 ch, u8 new_std){

	int retval = 0;
	u8 temp = new_std;

	if((ch) >= PIV7D9008_CHANNEL_SIZE){
		printk(KERN_ERR "%s: Input channel selected\n",__func__);
		return -1;
	}
	
	if((ch) > 3){
		PI7VD9008_page_select(1);
	} else {
		PI7VD9008_page_select(0);
	}

	if((new_std) >= PIV7D9008_FMT_IDX_SIZE){
		printk(KERN_ERR "%s: Input standard selected\n",__func__);
		return -2;
	}

	if((new_std) == 2){
		printk(KERN_WARNING "%s: Standard(2) is invalid.  Setting to auto detect\n",__func__);
		temp = 7;
	}

	retval = piv7d9008_write_reg(PIV7D9008_standard_select(ch), temp);
	//retval = piv7d9008_write_reg(PIV7D9008_standard_select(ch)+1, 0xFF);	// Standard Recognition
	
	/*
	 * Update the standard index field
	 */
	PIV7D9008_data.channel[ch].prev_std = PIV7D9008_data.channel[ch].curr_std;
	PIV7D9008_data.channel[ch].curr_std = temp;

	PI7VD9008_page_select(0);	/* No matter what, return to PAGE 0 */
	return retval;
}

static int PIV7D9008_init_default_mode(void)
{
	int retval = 0;
	printk(KERN_INFO "%s: \n",__func__);
	PIV7D9008_soft_reset();

	retval = PIV7D9008_init_default_comp();	/* NTSC Capture */

	/* allow initialization time */
	msleep(50);

	return retval;
}

static int PIV7D9008_init_mode(void)
{
	printk(KERN_INFO "PIV7D9008_init: Initialization called\n");
	return PIV7D9008_init_default_mode();
}


/* --------------- IOCTL functions from v4l2_int_ioctl_desc --------------- */
/*!
 * \fn ioctl_g_ifparm
 * \brief Get Slave Interface Parameters (V4L2)
 *
 * \param struct v4l2_int_device *s
 * \param struct v4l2_ifparm *p
 * \return int
 */
static int ioctl_g_ifparm(struct v4l2_int_device *s, struct v4l2_ifparm *p)
{
	if (s == NULL) {
		pr_err("   ERROR!! no slave device set!\n");
		return -1;
	}
	printk(KERN_INFO "%s: \n",__func__);
	memset(p, 0, sizeof(*p));
if (0)
	p->u.bt656.clock_curr = 0;
else
	p->u.bt656.clock_curr = PIV7D9008_data.mclk;

	printk(KERN_INFO "%s: Current Status 0x%04X\n",__func__,piv7d9008_read(0x00 + (HL_VID_INPUT_CH << 4) ) );
	printk(KERN_INFO "%s:    Clock_curr=mclk=%d\n", __func__,PIV7D9008_data.mclk);
	//PI7VD9008_page_select(1);
	printk(KERN_INFO "%s:    Video Detect 0x%04X\n",__func__,piv7d9008_read(0x0E + (HL_VID_INPUT_CH << 4))); 
	printk(KERN_INFO "%s:    Video Recogn 0x%04X\n",__func__,piv7d9008_read(0x0F + (HL_VID_INPUT_CH << 4)));
	//PI7VD9008_page_select(0);
	if (PIV7D9008_data.mclk == 0){
	printk(KERN_INFO "%s:         BT.656 Mode Selected\n", __func__);
	} else {
	printk(KERN_INFO "%s:         Gated Mode Selected\n", __func__);
	}
	p->if_type = V4L2_IF_TYPE_BT656;
	//p->u.bt656.mode = V4L2_IF_TYPE_BT656_MODE_NOBT_8BIT;
	p->u.bt656.mode = V4L2_IF_TYPE_BT656_MODE_BT_8BIT;
	p->u.bt656.clock_min = PIV7D9008_XCLK_MIN;
	p->u.bt656.clock_max = PIV7D9008_XCLK_MAX;
	p->u.bt656.bt_sync_correct = 0;  /* Indicate external vsync */
	return 0;
}

/*!
 * ioctl_s_power - V4L2 sensor interface handler for VIDIOC_S_POWER ioctl
 * @s: pointer to standard V4L2 device structure
 * @on: indicates power mode (on or off)
 *
 * Turns the power on or off, depending on the value of on and returns the
 * appropriate error code.
 */
static int ioctl_s_power(struct v4l2_int_device *s, int on)
{
	struct PIV7D9008_sensor_data *sensor = s->priv;

	printk(KERN_INFO "%s: \n",__func__);

	if (on && !sensor->on) {
		/* Make sure power on */
		PIV7D9008_power_down(0);
	} else if (!on && sensor->on) {
		PIV7D9008_power_down(1);
	}

	sensor->on = on;

	return 0;
}

/*!
 * ioctl_g_parm - V4L2 sensor interface handler for VIDIOC_G_PARM ioctl
 * @s: pointer to standard V4L2 device structure
 * @a: pointer to standard V4L2 VIDIOC_G_PARM ioctl structure
 *
 * Returns the sensor's video CAPTURE parameters.
 */
static int ioctl_g_parm(struct v4l2_int_device *s, struct v4l2_streamparm *a)
{
	struct PIV7D9008_sensor_data *sensor = s->priv;
	struct v4l2_captureparm *cparm = &a->parm.capture;
	int ret = 0;

	printk(KERN_INFO "%s: \n",__func__);

	switch (a->type) {
	/* This is the only case currently handled. */
	case V4L2_BUF_TYPE_VIDEO_CAPTURE:
		//memset(a, 0, sizeof(*a));
		//a->type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
		cparm->capability = sensor->streamcap.capability;
		cparm->timeperframe = sensor->streamcap.timeperframe;
		cparm->capturemode = sensor->streamcap.capturemode;
		ret = 0;
		break;

	/* These are all the possible cases. */
	case V4L2_BUF_TYPE_VIDEO_OUTPUT:
	case V4L2_BUF_TYPE_VIDEO_OVERLAY:
	case V4L2_BUF_TYPE_VBI_CAPTURE:
	case V4L2_BUF_TYPE_VBI_OUTPUT:
	case V4L2_BUF_TYPE_SLICED_VBI_CAPTURE:
	case V4L2_BUF_TYPE_SLICED_VBI_OUTPUT:
		ret = -EINVAL;
		break;

	default:
		pr_debug("   type is unknown - %d\n", a->type);
		ret = -EINVAL;
		break;
	}

	return ret;
}

/*!
 * ioctl_s_parm - V4L2 sensor interface handler for VIDIOC_S_PARM ioctl
 * @s: pointer to standard V4L2 device structure
 * @a: pointer to standard V4L2 VIDIOC_S_PARM ioctl structure
 *
 * Configures the sensor to use the input parameters, if possible.  If
 * not possible, reverts to the old parameters and returns the
 * appropriate error code.
 */
static int ioctl_s_parm(struct v4l2_int_device *s, struct v4l2_streamparm *a)
{
	struct PIV7D9008_sensor_data *sensor = s->priv;
	struct v4l2_fract *timeperframe = &a->parm.capture.timeperframe;
	int ret = 0;

	printk(KERN_INFO "%s: \n",__func__);

	/* Make sure power on */
	PIV7D9008_power_down(0);

	switch (a->type) {
		/* This is the only case currently handled. */
		case V4L2_BUF_TYPE_VIDEO_CAPTURE:
			printk(KERN_INFO "%s: V4L2_BUF_TYPE_VIDEO_CAPTURE Setting Frame Rate\n", __func__);
			/* Check that the new frame rate is allowed. */
			if(timeperframe->denominator / timeperframe->numerator < MAX_FPS){
					timeperframe->denominator = MIN_FPS;
					timeperframe->numerator = 1;
			} else {
					timeperframe->denominator = MAX_FPS;
					timeperframe->numerator = 1;
			}
				
			if (ret < 0)
				return ret;

			sensor->streamcap.timeperframe = *timeperframe;
			sensor->streamcap.capturemode = a->parm.capture.capturemode;
			break;

		/* These are all the possible cases. */
		case V4L2_BUF_TYPE_VIDEO_OUTPUT:
		case V4L2_BUF_TYPE_VIDEO_OVERLAY:
		case V4L2_BUF_TYPE_VBI_CAPTURE:
		case V4L2_BUF_TYPE_VBI_OUTPUT:
		case V4L2_BUF_TYPE_SLICED_VBI_CAPTURE:
		case V4L2_BUF_TYPE_SLICED_VBI_OUTPUT:
			pr_debug("   type is not " \
				"V4L2_BUF_TYPE_VIDEO_CAPTURE but %d\n",
				a->type);
			ret = -EINVAL;
			break;

		default:
			pr_debug("   type is unknown - %d\n", a->type);
			ret = -EINVAL;
			break;
	}

	//piv7d9008_read(PIV7D9008_REG_STD_SEL_CH_0);
	PIV7D9008_update_fps(timeperframe->denominator);
/*
	if(timeperframe->denominator == MIN_FPS){
		// switch to PAL mode
		printk(KERN_INFO "%s: Switching to PAL mode\n",__func__);
		//PIV7D9008_change_video_mode(0x01);		// Set all to NTSC
		PIV7D9008_set_comp_mode(0x01);

		// Update the frame size and rates!
		//PIV7D9008_data.channel[ch].curr_std
		PIV7D9008_data.pix.width = video_fmts[PIV7D9008_data.channel[PIV7D9008_CHANNEL_0].curr_std].raw_width;
		PIV7D9008_data.pix.height = video_fmts[PIV7D9008_data.channel[PIV7D9008_CHANNEL_0].curr_std].raw_height;
	} else {
		// switch to NTSC mode
		//PIV7D9008_change_video_mode(0x00);		// Set all to NTSC
		printk(KERN_INFO "%s: Switching to NTSC mode\n",__func__);
		//PIV7D9008_change_video_mode(0x00);		// Set all to NTSC
		PIV7D9008_set_comp_mode(0x00);
		PIV7D9008_data.pix.width = video_fmts[PIV7D9008_data.channel[PIV7D9008_CHANNEL_0].curr_std].raw_width;
		PIV7D9008_data.pix.height = video_fmts[PIV7D9008_data.channel[PIV7D9008_CHANNEL_0].curr_std].raw_height;
	}
	printk(KERN_INFO "%s: Frame Rate: %d/%d\n", __func__, timeperframe->denominator, timeperframe->numerator);
*/
	return ret;
}

/*!
 * Return attributes of current video standard.
 * Since this device autodetects the current standard, this function also
 * sets the values that need to be changed if the standard changes.
 * There is no set std equivalent function.
 *
 *  @return		None.
 */
DEFINE_MUTEX(PIV7D9008_LOCK);
static void PIV7D9008_get_std(v4l2_std_id *std)
{
	int status_1, status_2, standard;
	bool locked;

	printk(KERN_INFO "%s: \n", __func__);

	status_1 = piv7d9008_read(PIV7D9008_REG_VIDEO_STATUS_CH_3);	/* Video Status of locked or unlocked! */
	status_2 = piv7d9008_read(PIV7D9008_REG_STD_SEL_CH_3);		/* Top Word contains currently locked source */
	locked = status_1 & 0x08;	/* Vertical locked*/
	standard = (status_1 & 0x01);  	/* Detect 60 Hz or 50Hz */

	mutex_lock(&PIV7D9008_LOCK);
	*std = V4L2_STD_ALL;
	//idx = PIV7D9008_NOT_LOCKED;
	PIV7D9008_data.channel[HL_VID_INPUT_CH].prev_std = 	PIV7D9008_data.channel[HL_VID_INPUT_CH].curr_std;
	PIV7D9008_data.channel[HL_VID_INPUT_CH].curr_std = 	PIV7D9008_NOT_LOCKED;
	if (locked) {
		printk(KERN_INFO "%s: locked %d\n",__func__, standard);
		switch(standard){
			case PIV7D9008_NTSC:
				printk(KERN_INFO "%s: NTSC %d\n",__func__, standard);
				*std = PIV7D9008_NTSC;
				PIV7D9008_data.channel[HL_VID_INPUT_CH].curr_std = PIV7D9008_NTSC;
				break;
			case PIV7D9008_PAL:
				printk(KERN_INFO "%s: PAL %d\n",__func__, standard);
				*std = PIV7D9008_PAL;
				PIV7D9008_data.channel[HL_VID_INPUT_CH].curr_std = PIV7D9008_PAL;
				break;
			case PIV7D9008_NV:
				*std = PIV7D9008_NV;
				PIV7D9008_data.channel[HL_VID_INPUT_CH].curr_std = PIV7D9008_NV;
				break;
			case PIV7D9008_NTSC_4_43:
				*std = PIV7D9008_NTSC_4_43;
				PIV7D9008_data.channel[HL_VID_INPUT_CH].curr_std = PIV7D9008_NTSC_4_43;
				break;
			case PIV7D9008_PAL_M:
				*std = PIV7D9008_PAL_M;
				PIV7D9008_data.channel[HL_VID_INPUT_CH].curr_std = PIV7D9008_PAL_M;
				break;
			case PIV7D9008_PAL_CN:
				*std = PIV7D9008_PAL_CN;
				PIV7D9008_data.channel[HL_VID_INPUT_CH].curr_std = PIV7D9008_PAL_CN;
				break;
			case PIV7D9008_PAL_60:
				*std = PIV7D9008_PAL_60;
				PIV7D9008_data.channel[HL_VID_INPUT_CH].curr_std = PIV7D9008_PAL_60;
				break;
			default:
			case PIV7D9008_NOT_LOCKED:
				printk(KERN_INFO "%s: NOT LOCKED %d\n",__func__, standard);
				break;

		}
/*		if (standard == 0x40) {
			*std = V4L2_STD_PAL;
			idx = ADV7180_PAL;
		} else if (standard == 0) {
			*std = V4L2_STD_NTSC;
			idx = ADV7180_NTSC;
		}
*/
	}
	mutex_unlock(&PIV7D9008_LOCK);

	/* This assumes autodetect which this device uses. */
	if (PIV7D9008_data.channel[HL_VID_INPUT_CH].curr_std != PIV7D9008_data.channel[HL_VID_INPUT_CH].prev_std) {
		printk(KERN_INFO "%s: Altering Format\n",__func__);
		//video_idx = idx;
		//adv7180_data.std_id = *std;
		PIV7D9008_data.pix.width = video_fmts[PIV7D9008_data.channel[HL_VID_INPUT_CH].curr_std].raw_width;
		PIV7D9008_data.pix.height = video_fmts[PIV7D9008_data.channel[HL_VID_INPUT_CH].curr_std].raw_height;
	}
}

/*!
 * ioctl_g_fmt_cap - V4L2 sensor interface handler for ioctl_g_fmt_cap
 * @s: pointer to standard V4L2 device structure
 * @f: pointer to standard V4L2 v4l2_format structure
 *
 * Returns the sensor's current pixel format in the v4l2_format
 * parameter.
 */
static int ioctl_g_fmt_cap(struct v4l2_int_device *s, struct v4l2_format *f)
{
	struct PIV7D9008_sensor_data *sensor = s->priv;
	v4l2_std_id std;

	printk(KERN_INFO "%s: \n",__func__);
	f->fmt.pix = sensor->pix;

	switch (f->type) {
		case V4L2_BUF_TYPE_VIDEO_CAPTURE:
			printk(KERN_INFO "%s:   V4L2_BUF_TYPE_VIDEO_CAPTURE size of %dx%d\n", __func__, sensor->pix.width, sensor->pix.height);
			f->fmt.pix = sensor->pix;
			break;

		case V4L2_BUF_TYPE_PRIVATE: {
				printk(KERN_INFO "%s:   Current Standard %d\n", __func__, PIV7D9008_data.channel[HL_VID_INPUT_CH].curr_std);
				PIV7D9008_get_std(&std);
				f->fmt.pix.pixelformat = (u32)std;
				//f->fmt.pix = sensor->pix;
				//f->fmt.pix.pixelformat = V4L2_PIX_FMT_UYVY;
				printk(KERN_INFO "%s:   V4L2_BUF_TYPE_PRIVATE size of %dx%d\n", __func__, f->fmt.pix.width, f->fmt.pix.height);
				printk(KERN_INFO "%s:   New Standard %d\n", __func__, PIV7D9008_data.channel[HL_VID_INPUT_CH].curr_std);
			}
			break;
		default:
			printk(KERN_INFO "%s:   default size of %dx%d\n", __func__, f->fmt.pix.width, f->fmt.pix.height);
			f->fmt.pix = sensor->pix;
			break;
	}

	return 0;
}

/*
 * PIV7D9008_change_video_mode
 *
 *	Description: Changes the Video Mode by writing to the i2c device to adjust to a new mode
 *	INPUT: new_mode (enum video_fmt_index) 
 */
static int PIV7D9008_change_video_mode(int new_mode){
	int ret = 0;
	
	PIV7D9008_set_video_std(0, new_mode);
	PIV7D9008_set_video_std(1, new_mode);
	PIV7D9008_set_video_std(2, new_mode);
	PIV7D9008_set_video_std(3, new_mode);
	PIV7D9008_set_video_std(4, new_mode);
	PIV7D9008_set_video_std(5, new_mode);
	PIV7D9008_set_video_std(6, new_mode);
	PIV7D9008_set_video_std(7, new_mode);
	return ret;
}

/*!
 * ioctl_s_fmt_cap - V4L2 sensor interface handler for ioctl_s_fmt_cap
 * @s: pointer to standard V4L2 device structure
 * @f: pointer to standard V4L2 v4l2_format structure to try and set to
 *
 * Sets the desired sensor's settings to the desired pixel format in the v4l2_format
 * parameter.
 */
static int ioctl_s_fmt_cap(struct v4l2_int_device *s, struct v4l2_format *f)
{
	int ret = 0,i=0,best=-1;
	u32 d=0;
	u32 diff = -1;
	//struct PIV7D9008_sensor_data *sensor = s->priv;

	printk(KERN_INFO "%s: \n",__func__);

	switch (f->type) {
		case V4L2_BUF_TYPE_VIDEO_CAPTURE:
			printk(KERN_INFO "%s:   Attempting to set size of %dx%d\n",__func__, f->fmt.pix.width, f->fmt.pix.height);
			
			/**
				Use vid_list to now parse and understand if the desired resolution is applicable
			 */
			for(i=0; i < PIV7D9008_FMT_IDX_SIZE; i++){
				if(video_fmts[i].raw_width >= f->fmt.pix.width && video_fmts[i].raw_height >= f->fmt.pix.height){
					d = (video_fmts[i].raw_width - f->fmt.pix.width) + 
						(video_fmts[i].raw_height - f->fmt.pix.height);
					if (diff > d){
						diff = d;
						best = i;
					}
				}
			}
			/**
				We have our mode unless best == -1
			 */
			if(best == -1){
				printk(KERN_ERR "%s: Mode was not found based on selection. Selecting Autodetect\n",__func__);
				best = PIV7D9008_NOT_LOCKED;
			}
			/* Alter the mode set forth in VID_STD */
			PIV7D9008_change_video_mode(best);			// Best is the Index to use for width/height selection
			break;
		default:
			ret = -EINVAL;
			break;
	}
	return ret;
}

/*!
 * ioctl_g_ctrl - V4L2 sensor interface handler for VIDIOC_G_CTRL ioctl
 * @s: pointer to standard V4L2 device structure
 * @vc: standard V4L2 VIDIOC_G_CTRL ioctl structure
 *
 * If the requested control is supported, returns the control's current
 * value from the video_control[] array.  Otherwise, returns -EINVAL
 * if the control is not supported.
 */
static int ioctl_g_ctrl(struct v4l2_int_device *s, struct v4l2_control *vc)
{
	/* TODO! */
	int ret = 0;
	printk(KERN_INFO "%s: \n",__func__);
	switch (vc->id) {
		case V4L2_CID_BRIGHTNESS:
			vc->value = PIV7D9008_data.channel[HL_VID_INPUT_CH].brightness;
			break;
		case V4L2_CID_HUE:
			vc->value = PIV7D9008_data.channel[HL_VID_INPUT_CH].hue;
			//vc->value = PIV7D9008_data.hue;
			break;
		case V4L2_CID_CONTRAST:
			vc->value = PIV7D9008_data.channel[HL_VID_INPUT_CH].contrast;
			break;
		case V4L2_CID_SATURATION:
			vc->value = PIV7D9008_data.channel[HL_VID_INPUT_CH].saturation;
			break;
		//case V4L2_CID_RED_BALANCE:
		//	vc->value = PIV7D9008_data.channel[0].red;
		//	break;
		//case V4L2_CID_BLUE_BALANCE:
		//	vc->value = PIV7D9008_data.channel[0].blue;
		//	break;
		//case V4L2_CID_EXPOSURE:
		//	vc->value = PIV7D9008_data.ae_mode;
		//	break;
		default:
			ret = -EINVAL;
	}

	return ret;
}

/*
 * PIV7D9008_cid_brightness
 *
 *	Description: Call back to adjust the brightness for the PIV7D9008
 */
static s32 PIV7D9008_cid_brightness(s32 value){
	s32 ret = 0;
	ret = piv7d9008_write_reg(PIV7D9008_REG_BRIGHTNESS_CH_0, value);
	//ret=PIV7D9008_generic_i2c_byte_write(PIV7D9008_data.i2c_client, PIV7D9008_REG_CP_SLAVE_ADDRESS, PIV7D9008_REG_CP_BRIGHTNESS, (u8)(value & 0x000000FF));
	if(ret >= 0) 
		PIV7D9008_data.channel[HL_VID_INPUT_CH].brightness = value;
	return ret;
}

/*
 * PIV7D9008_cid_contrast
 *
 *	Description: Call back to adjust the contrast for the PIV7D9008
 */
static s32 PIV7D9008_cid_contrast(s32 value){
	s32 ret = 0;
	ret = piv7d9008_write_reg(PIV7D9008_REG_CONTRAST_CH_0, value);
	//ret=PIV7D9008_generic_i2c_byte_write(PIV7D9008_data.i2c_client, PIV7D9008_REG_CP_SLAVE_ADDRESS, PIV7D9008_REG_CP_CONTRAST, (u8)(value & 0x000000FF));
	if(ret >= 0) 
		PIV7D9008_data.channel[HL_VID_INPUT_CH].contrast = value;
	return ret;
}

/*
 * PIV7D9008_cid_hue
 *
 *	Description: Call back to adjust the hue for the PIV7D9008
 */
static s32 PIV7D9008_cid_hue(s32 value){
	s32 ret = 0;
	ret = piv7d9008_write_reg(PIV7D9008_REG_HUE_CH_0, value);
	if(ret >= 0) 
		PIV7D9008_data.channel[HL_VID_INPUT_CH].hue = value;
	return ret;
}

/*
 * PIV7D9008_cid_hue
 *
 *	Description: Call back to adjust the hue for the PIV7D9008
 */
static s32 PIV7D9008_cid_saturation(s32 value){
	s32 ret = 0;
	//ret = piv7d9008_write_reg(PIV7D9008_REG_BRIGHTNESS_CH_0, value);
	if(ret >= 0) 
		PIV7D9008_data.channel[HL_VID_INPUT_CH].saturation = value;
	return ret;
}

/*!
 * ioctl_s_ctrl - V4L2 sensor interface handler for VIDIOC_S_CTRL ioctl
 * @s: pointer to standard V4L2 device structure
 * @vc: standard V4L2 VIDIOC_S_CTRL ioctl structure
 *
 * If the requested control is supported, sets the control's current
 * value in HW (and updates the video_control[] array).  Otherwise,
 * returns -EINVAL if the control is not supported.
 */
static int ioctl_s_ctrl(struct v4l2_int_device *s, struct v4l2_control *vc)
{
	int retval = 0;

	pr_debug("In PIV7D9008:ioctl_s_ctrl %d\n", vc->id);

	switch (vc->id) {
		case V4L2_CID_BRIGHTNESS:
			retval = PIV7D9008_cid_brightness(vc->value);
			break;
		case V4L2_CID_CONTRAST:
			retval = PIV7D9008_cid_contrast(vc->value);
			break;
		case V4L2_CID_SATURATION:
			retval = PIV7D9008_cid_saturation(vc->value);
			break;
		case V4L2_CID_HUE:
			retval = PIV7D9008_cid_hue(vc->value);
			break;
		case V4L2_CID_AUTO_WHITE_BALANCE:
			break;
		case V4L2_CID_DO_WHITE_BALANCE:
			break;
		case V4L2_CID_RED_BALANCE:
			break;
		case V4L2_CID_BLUE_BALANCE:
			break;
		case V4L2_CID_GAMMA:
			break;
		case V4L2_CID_EXPOSURE:
			break;
		case V4L2_CID_AUTOGAIN:
			break;
		case V4L2_CID_GAIN:
			break;
		case V4L2_CID_HFLIP:
			break;
		case V4L2_CID_VFLIP:
			break;
		case V4L2_CID_AUTOBRIGHTNESS:
			break;
		case V4L2_CID_ROTATE:
			// Added for use in the mxc_v4l2_output.c files
			retval = 1;
			break;
		case V4L2_CID_MXC_MOTION:
			// Added for use in the mxc_v4l2_output.c files
			retval = 1;
			break;
		default:
			retval = -EPERM;
			break;
	}

	return retval;
}

/*!
 * ioctl_enum_framesizes - V4L2 sensor interface handler for
 *			   VIDIOC_ENUM_FRAMESIZES ioctl
 * @s: pointer to standard V4L2 device structure
 * @fsize: standard V4L2 VIDIOC_ENUM_FRAMESIZES ioctl structure
 *
 * Return 0 if successful, otherwise -EINVAL.
 */
static int ioctl_enum_framesizes(struct v4l2_int_device *s,
				 struct v4l2_frmsizeenum *fsize)
{
	//struct PIV7D9008_sensor_data *sensor = s->priv;
	//const struct PIV7D9008_video_standards *vid_list;
	//int vid_list_size = 0;
	printk(KERN_INFO "%s: \n",__func__);
	fsize->pixel_format = PIV7D9008_data.pix.pixelformat;

	if(fsize->index >= PIV7D9008_FMT_IDX_SIZE)
		return -EINVAL;

	fsize->discrete.width = video_fmts[fsize->index].active_width;
	fsize->discrete.height = video_fmts[fsize->index].active_height;
	return 0;
}

/*!
 * ioctl_enum_frameintervals - V4L2 sensor interface handler for
 *			       VIDIOC_ENUM_FRAMEINTERVALS ioctl
 * @s: pointer to standard V4L2 device structure
 * @fival: standard V4L2 VIDIOC_ENUM_FRAMEINTERVALS ioctl structure
 *
 * Return 0 if successful, otherwise -EINVAL.
 */
static int ioctl_enum_frameintervals(struct v4l2_int_device *s,
					 struct v4l2_frmivalenum *fival)
{
	struct video_fmt_t fmt;
	int i;

	if (fival->index != 0)
		return -EINVAL;

	for (i = 0; i < ARRAY_SIZE(video_fmts) - 1; i++) {
		fmt = video_fmts[i];
		if (fival->width  == fmt.active_width &&
		    fival->height == fmt.active_height) {
			fival->type = V4L2_FRMIVAL_TYPE_DISCRETE;
			fival->discrete.numerator = 1;
			fival->discrete.denominator = fmt.frame_rate;
			return 0;
		}
	}

	return -EINVAL;
}

/*!
 * ioctl_g_chip_ident - V4L2 sensor interface handler for
 *			VIDIOC_DBG_G_CHIP_IDENT ioctl
 * @s: pointer to standard V4L2 device structure
 * @id: pointer to int
 *
 * Return 0.
 */
static int ioctl_g_chip_ident(struct v4l2_int_device *s, int *id)
{
	printk(KERN_INFO "%s: \n",__func__);
	((struct v4l2_dbg_chip_ident *)id)->match.type =
					V4L2_CHIP_MATCH_I2C_DRIVER;
	strcpy(((struct v4l2_dbg_chip_ident *)id)->match.name, "PIV7D9008_camera");

	return 0;
}

/*!
 * ioctl_init - V4L2 sensor interface handler for VIDIOC_INT_INIT
 * @s: pointer to standard V4L2 device structure
 */
static int ioctl_init(struct v4l2_int_device *s)
{
	return PIV7D9008_init_default_mode();	// Simply Defers to the default init modes from PIV7D9008
}

/*!
 * ioctl_enum_fmt_cap - V4L2 sensor interface handler for VIDIOC_ENUM_FMT
 * @s: pointer to standard V4L2 device structure
 * @fmt: pointer to standard V4L2 fmt description structure
 *
 * Return 0.
 */
static int ioctl_enum_fmt_cap(struct v4l2_int_device *s,
			      struct v4l2_fmtdesc *fmt)
{
	//struct PIV7D9008_sensor_data *sensor = s->priv;
	int vid_list_size = 0;

	if (fmt->index >= vid_list_size)
		return -EINVAL;

	fmt->pixelformat = PIV7D9008_data.pix.pixelformat;
	printk(KERN_INFO "%s: Format %dx%d\n",__func__,video_fmts[fmt->index].active_width, video_fmts[fmt->index].active_height);
	return 0;
}

/*!		02/23/2015
 * ioctl_dev_init - V4L2 sensor interface handler for vidioc_int_dev_init_num
 * @s: pointer to standard V4L2 device structure
 *
 * Initialise the device when slave attaches to the master.
 */
static int ioctl_dev_init(struct v4l2_int_device *s)
{
	struct PIV7D9008_sensor_data *sensor = s->priv;
	u32 tgt_xclk;	/* target xclk */
	//u32 tgt_fps;	/* target frames per secound */
	int ret=0;
	struct ipu_soc *ipur;								// Added from reference

	printk(KERN_INFO "%s: \n",__func__);
	PIV7D9008_data.on = true;

	ipur = ipu_get_soc(sensor->ipu_id);						// Added from reference AR0134
	ipu_enable_csi(ipur, sensor->csi);						// Added from reference AR0134

	/* mclk */
	if(PIV7D9008_data.mclk == 0 )
		printk(KERN_INFO "%s: mclk reported as 0.  Are we in Gated mode?\n", __func__);
	else {
		tgt_xclk = PIV7D9008_data.mclk;
		tgt_xclk = min(tgt_xclk, (u32)PIV7D9008_XCLK_MAX);
		tgt_xclk = max(tgt_xclk, (u32)PIV7D9008_XCLK_MIN);
		PIV7D9008_data.mclk = tgt_xclk;

		printk(KERN_INFO "%s: Setting mclk to %d MHz\n", __func__, tgt_xclk / 1000000);
		clk_set_rate(PIV7D9008_data.sensor_clk, PIV7D9008_data.mclk);
	}

	/* Default camera frame rate is set in probe */
//	tgt_fps = sensor->streamcap.timeperframe.denominator /
//		  sensor->streamcap.timeperframe.numerator;
	__display_CSI_register_data(ipur, PIV7D9008_data.csi);


	/* */
	ret = PIV7D9008_init_mode();
	return ret;
}

/*
	Built for debugging
 */
static u32 __display_CSI_register_data(struct ipu_soc *ipu, u32 csi){
	u32 retval = 0;
	//u32 temp = 0;
	printk( KERN_INFO "%s: %x\n", __func__, csi );

	//_ipu_get(ipu);
	clk_enable(ipu->ipu_clk);

	if(csi != 0){
		// CSI 1
		retval = 1;
	} else {
		// CSI 0 
		retval = 0;
	}

	mutex_lock(&ipu->mutex_lock);
	/* Print Some CSI Information */
	printk( KERN_INFO "%s: Reading next...\n", __func__) ;
	//temp = ;
	printk( KERN_INFO "%s: CSI%d_SENS_CONF: 0x%08X\n", __func__,retval, ipu_csi_read(ipu, retval, CSI_SENS_CONF) ) ;

//	temp = ;
	printk( KERN_INFO "%s: CSI%d_SENS_FRM_SIZE: 0x%08X\n", __func__,retval, ipu_csi_read(ipu, retval, CSI_SENS_FRM_SIZE)) ;

//	temp = ;
	printk( KERN_INFO "%s: CSI%d_ACT_FRM_SIZE: 0x%08X\n", __func__,retval, ipu_csi_read(ipu, retval, CSI_ACT_FRM_SIZE) ) ;

	/* Added on 02/27/2015 */
	printk( KERN_INFO "%s: CSI%d_OUT_FRM_CTRL: 0x%08X\n", __func__,retval, ipu_csi_read(ipu, retval, CSI_OUT_FRM_CTRL) ) ;

	mutex_unlock(&ipu->mutex_lock);

	//_ipu_put(ipu);
	clk_disable(ipu->ipu_clk);

	return retval;
}

/*!
 * ioctl_dev_exit - V4L2 sensor interface handler for vidioc_int_dev_exit_num
 * @s: pointer to standard V4L2 device structure
 *
 * Delinitialise the device when slave detaches to the master.
 */
static int ioctl_dev_exit(struct v4l2_int_device *s)
{
	return 0;
}

/***********************************************************************
 * PRIVATE IOCTL FUNCTIONS FOR THIS MXC Capture Group
 ***********************************************************************/
// Added for Version 0.1
static int ioctl_priv_process_buf(struct v4l2_int_device *s, struct v4l2_buffer *buf){
	int i = 0;
	//u32 *bufp = &buf->m.offset;	/* This is the pointer in memory to the start of the buffer*/
	//u32 diff = 0;
	//diff = DEFAULT_HW_CSI_CAPTURE_MSB - PIV7D9008_data.vid_msb;	//19 - 15 = 4;
	//diff = 19 - PIV7D9008_data.vid_msb;	//19 - 15 = 4;

	//for(i=0; i < buf->bytesused; i++){
	//	buf->m.offset[i] = buf->m.offset[i] << diff;
	//}
	return i;
}

/***********************************************************************
 * MXC V4l2 Device Driver Section.
 ***********************************************************************/

/* ---------------------- PIV7D9008 v4l2 ioctl descriptors ------------------------ */
/*!
 * This structure defines all the ioctls for this module and links them to the
 * enumeration.
 */
static struct v4l2_int_ioctl_desc PIV7D9008_ioctl_desc[] = {
	{ vidioc_int_dev_init_num, 		(v4l2_int_ioctl_func *)ioctl_dev_init },
	{ vidioc_int_dev_exit_num,  				       ioctl_dev_exit},
	{ vidioc_int_s_power_num,  		(v4l2_int_ioctl_func *)ioctl_s_power },
	{ vidioc_int_g_ifparm_num,  		(v4l2_int_ioctl_func *)ioctl_g_ifparm },
	{ vidioc_int_init_num,  		(v4l2_int_ioctl_func *)ioctl_init },
	{ vidioc_int_enum_fmt_cap_num,  	(v4l2_int_ioctl_func *)ioctl_enum_fmt_cap },
	{ vidioc_int_g_fmt_cap_num,		(v4l2_int_ioctl_func *)ioctl_g_fmt_cap },
	{ vidioc_int_s_fmt_cap_num, 		(v4l2_int_ioctl_func *)ioctl_s_fmt_cap },
	{ vidioc_int_g_parm_num,		(v4l2_int_ioctl_func *)ioctl_g_parm },
	{ vidioc_int_s_parm_num,		(v4l2_int_ioctl_func *)ioctl_s_parm },
	{ vidioc_int_g_ctrl_num,		(v4l2_int_ioctl_func *)ioctl_g_ctrl },
	{ vidioc_int_s_ctrl_num,		(v4l2_int_ioctl_func *)ioctl_s_ctrl },
	{ vidioc_int_enum_framesizes_num,	(v4l2_int_ioctl_func *)ioctl_enum_framesizes },
	{ vidioc_int_enum_frameintervals_num,	(v4l2_int_ioctl_func *)ioctl_enum_frameintervals },
	{ vidioc_int_g_chip_ident_num,		(v4l2_int_ioctl_func *)ioctl_g_chip_ident },
	{ vidioc_int_priv_process_buf,		(v4l2_int_ioctl_func *)ioctl_priv_process_buf },
};

static struct v4l2_int_slave PIV7D9008_slave = {
	.ioctls = PIV7D9008_ioctl_desc,
	.num_ioctls = ARRAY_SIZE(PIV7D9008_ioctl_desc),
};

static struct v4l2_int_device PIV7D9008_int_device = {
	.module = THIS_MODULE,
	.name = "piv7d9008",
	.type = v4l2_int_type_slave,
	.u = {
		.slave = &PIV7D9008_slave,
	},
};

/***********************************************************************
 * I2C client and driver.
 ***********************************************************************/
/***********************************************************************
 * I2C transfert.
 ***********************************************************************/

/*! Read one register from a PIV7D9008 i2c slave device.
 *
 *  @param *reg		register in the device we wish to access.
 *
 *  @return		       Returns Register value or -1
 */
static inline int piv7d9008_read(u8 reg)
{
	int val;

	val = i2c_smbus_read_byte_data(PIV7D9008_data.i2c_client, reg);
	printk(KERN_INFO "%s: Master Send:addr=%x reg=%x count=%x\n",__func__, PIV7D9008_data.i2c_client->addr, reg, val);
	if (val < 0) {
		printk(KERN_ERR "%s:read reg error: reg=%2x\n", __func__, reg);
		return -1;
	}
	return val;
}

/*! Write one register of a PIV7D9008 i2c slave device.
 *
 *  @param *reg		register in the device we wish to access.
 *
 *  @return		      0 if success, an error code otherwise.
 */
static int piv7d9008_write_reg(u8 reg, u8 val)
{
	s32 ret;

	ret = i2c_smbus_write_byte_data(PIV7D9008_data.i2c_client, reg, val);
	printk(KERN_DEBUG "%s: Master Send:addr=%x reg=%x count=%x\n",__func__, PIV7D9008_data.i2c_client->addr, reg, ret);
	if (ret < 0) {
		printk(KERN_ERR "%s:write reg error:reg=%2x,val=%2x\n", __func__,
			reg, val);
		return -1;
	}
	return 0;
}

/***********************************************************************
 * I2C transfert.
 ***********************************************************************/

/*! Read one register from a PIV7D9008 i2c slave device.
 *
 *  @param *reg		register in the device we wish to access.
 *
 *  @return		       Register value or -1 if error
 */
static inline int PIV7D9008_read_byte_data(u8 addr, u8 reg)
{
	int val;
	u8 tempaddr = PIV7D9008_data.i2c_client->addr;
	PIV7D9008_data.i2c_client->addr = addr;
	val = i2c_smbus_read_byte_data(PIV7D9008_data.i2c_client, reg);
	if (val < 0) {
		pr_err("%s:read reg error: addr=%x reg=%2x\n", __func__, PIV7D9008_data.i2c_client->addr, reg);
		return -1;
	}
	PIV7D9008_data.i2c_client->addr = tempaddr;
	return val;
}

/*! Write one register of a PIV7D9008 i2c slave device.
 *
 *  @param *reg		register in the device we wish to access.
 *
 *  @return		       0 if success, an error code otherwise.
 */
static int PIV7D9008_write_reg(u8 addr, u8 reg, u8 val)
{
	s32 ret;
	u8 tempaddr = PIV7D9008_data.i2c_client->addr;
	PIV7D9008_data.i2c_client->addr = addr;
	ret = i2c_smbus_write_byte_data(PIV7D9008_data.i2c_client, reg, val);
	if (ret < 0) {
		pr_err("%s:write reg error: addr=%x reg=%2x,val=%2x\n", __func__,PIV7D9008_data.i2c_client->addr, reg, val);
		return -1;
	}
	PIV7D9008_data.i2c_client->addr = tempaddr;
	return 0;
}

/* ---------------------- PROBE ------------------------------------ */

static void PIV7D9008_init_channel(struct PIV7D9008_sensor_data *sensor, int ch){
	/* Default values are taken from PIV7D9008ABH Datasheet */
	sensor->channel[ch].brightness 	= 0x00;
	sensor->channel[ch].contrast 	= 0x64;
	sensor->channel[ch].sharpness 	= 0x00;
	sensor->channel[ch].chroma_u 	= 0x80;
	sensor->channel[ch].chroma_v 	= 0x80;
	sensor->channel[ch].hue 	= 0x00;

	sensor->channel[ch].h_delay	= 0x00;

	sensor->channel[ch].curr_std	= PIV7D9008_NOT_LOCKED;
	sensor->channel[ch].prev_std	= PIV7D9008_NOT_LOCKED;

	sensor->channel[ch].HZOOM	= 0x00;
}

/*!
 * PIV7D9008 I2C probe function.
 * Function set in i2c_driver struct.
 * Called by insmod.
 *
 *  @param *adapter	I2C adapter descriptor.
 *
 *  @return		Error code indicating success or failure.
 */
static int PIV7D9008_probe(struct i2c_client *client,
			 const struct i2c_device_id *id)
{
	struct pinctrl *pinctrl;
	struct device *dev = &client->dev;
	//struct v4l2_subdev *sd;
	int retval, val=0;
	//u8 chip_id_high, chip_id_low;
	struct regmap *gpr;
	//struct ipu_soc *ipur;
	struct PIV7D9008_sensor_data *sensor = &PIV7D9008_data;

	printk(KERN_INFO "%s: Something probed the PIV7D9008!\n", __func__);

	/* Check if the adapter supports the needed features */
	if (!i2c_check_functionality(client->adapter, I2C_FUNC_SMBUS_BYTE_DATA))
		return -EIO;
	printk(KERN_INFO "%s: detecting PIV7D9008 client on address 0x%x\n",__func__,client->addr << 1);

	/* Set initial values for the sensor struct. */
	memset(&PIV7D9008_data, 0, sizeof(PIV7D9008_data));

	/* Notify adapter allocation */
	printk(KERN_INFO "DBG sensor data is at %p\n", &PIV7D9008_data);

	/* PIV7D9008 pinctrl */
	pinctrl = devm_pinctrl_get_select_default(dev);
	if (IS_ERR(pinctrl)) {
		dev_err(dev, "setup pinctrl failed\n");
		return PTR_ERR(pinctrl);
	}

	printk(KERN_INFO "%s: Requesting reset pin\n", __func__);
	/* request reset pin */
	PIV7D9008_data.rst_gpio = of_get_named_gpio(dev->of_node, "rst-gpios", 0);
	if (!gpio_is_valid(PIV7D9008_data.rst_gpio)) {
		dev_warn(dev, "no sensor reset pin available");
		return -EINVAL;
	}
	retval = devm_gpio_request_one(dev, PIV7D9008_data.rst_gpio, GPIOF_OUT_INIT_HIGH,
					"PIV7D9008_reset");
	if (retval < 0)
		return retval;

	printk(KERN_INFO "%s initializing variables\n", __func__);

	/* Initialize variables */
	PIV7D9008_data.i2c_client = client;	// Set the PIV7D9008_data field <i2c_client> to this i2c_client
	printk(KERN_INFO "%s devm_clk_get csi_mclk\n", __func__);
	PIV7D9008_data.sensor_clk = devm_clk_get(dev, "csi_mclk");
	if (IS_ERR(PIV7D9008_data.sensor_clk)) {
		dev_err(dev, "get mclk failed\n");
		return PTR_ERR(PIV7D9008_data.sensor_clk);
	}

	printk(KERN_INFO "%s devm_clk_get mclk\n", __func__);
	retval = of_property_read_u32(dev->of_node, "mclk", &PIV7D9008_data.mclk);
	if (retval) {
		dev_err(dev, "mclk frequency is invalid\n");
		return retval;
	}

	printk(KERN_INFO "%s devm_clk_get mclk_source\n", __func__);
	retval = of_property_read_u32(dev->of_node, "mclk_source", (u32 *) &(PIV7D9008_data.mclk_source));
	if (retval) {
		dev_err(dev, "mclk_source invalid\n");
		return retval;
	}

	printk(KERN_INFO "%s devm_clk_get ipu_id\n", __func__);
	retval = of_property_read_u32(dev->of_node, "ipu_id", &PIV7D9008_data.ipu_id);
	if (retval) {
		dev_err(dev, "ipu_id missing or invalid\n");
		return retval;
	}

	printk(KERN_INFO "%s devm_clk_get csi_id\n", __func__);
	retval = of_property_read_u32(dev->of_node, "csi_id", &PIV7D9008_data.csi);
	if (retval) {
		dev_err(dev, "csi_id invalid\n");
		return retval;
	}

	printk(KERN_INFO "%s vid_msb search\n", __func__);
	retval = of_property_read_u32(dev->of_node, "vid_msb", &PIV7D9008_data.vid_msb);
	if (retval) {
		dev_err(dev, "vid_msb invalid or not found\n");
		// Assuming data is aligned per datasheet
		//PIV7D9008_data.vid_msb = DEFAULT_HW_CSI_CAPTURE_MSB;
		PIV7D9008_data.vid_msb = 19;
	}

	printk(KERN_INFO "%s all values read.  Preparing struct\n", __func__);

	PIV7D9008_data.io_init = PIV7D9008_reset;
	PIV7D9008_data.i2c_client = client;
	//PIV7D9008_data.pix.pixelformat = V4L2_PIX_FMT_RGB565;
	//PIV7D9008_data.pix.pixelformat = V4L2_PIX_FMT_YUYV;
	PIV7D9008_data.pix.pixelformat = V4L2_PIX_FMT_UYVY;	// this is the order!
	PIV7D9008_init_channel(sensor, PIV7D9008_CHANNEL_0);
	PIV7D9008_init_channel(sensor, PIV7D9008_CHANNEL_1);
	PIV7D9008_init_channel(sensor, PIV7D9008_CHANNEL_2);
	PIV7D9008_init_channel(sensor, PIV7D9008_CHANNEL_3);
	PIV7D9008_init_channel(sensor, PIV7D9008_CHANNEL_4);
	PIV7D9008_init_channel(sensor, PIV7D9008_CHANNEL_5);
	PIV7D9008_init_channel(sensor, PIV7D9008_CHANNEL_6);
	PIV7D9008_init_channel(sensor, PIV7D9008_CHANNEL_7);

	PIV7D9008_data.pix.width = video_fmts[PIV7D9008_data.channel[HL_VID_INPUT_CH].curr_std].raw_width;
	PIV7D9008_data.pix.height = video_fmts[PIV7D9008_data.channel[HL_VID_INPUT_CH].curr_std].raw_height;
	//PIV7D9008_data.pix.priv = 1;  /* 1 is used to indicate TV in */
	PIV7D9008_data.streamcap.capability = 0;
	//PIV7D9008_data.streamcap.capability = V4L2_CAP_TIMEPERFRAME;
	PIV7D9008_data.streamcap.capturemode = 0;
	PIV7D9008_data.streamcap.timeperframe.denominator = 0;
	PIV7D9008_data.streamcap.timeperframe.numerator = 1;

	printk(KERN_INFO "%s Struct prepared.  Attempting reset\n", __func__);
	PIV7D9008_reset();

	PIV7D9008_power_down(0);

	/*
	 *	Verify that the chip is present
	 */
	printk(KERN_INFO "%s: Attempting to find PIV7D9008 on i2c bus\n", __func__);
	val = piv7d9008_read(PIV7D9008_REG_DEVICE_ID_H);
	val = ((val & 0x000000FF) << 8) | piv7d9008_read(PIV7D9008_REG_DEVICE_ID_L);
	printk(KERN_INFO "%s: Value Read @ 0x%x is 0x%x\n", __func__ , sensor->i2c_client->addr, val);	
	if(val != 0xb0) {
		printk(KERN_ERR "%s: ERROR not an PIV7D9008 on address 0x%x\n", __func__, client->addr << 1);
		return -ENODEV;
	}

	printk(KERN_INFO "%s PIV7D9008 found.  Attempting device enable\n", __func__);
	PIV7D9008_power_down(1);

	clk_prepare_enable(PIV7D9008_data.sensor_clk);

	gpr = syscon_regmap_lookup_by_compatible("fsl,imx6q-iomuxc-gpr");
	if (!IS_ERR(gpr)) {
		if (of_machine_is_compatible("fsl,imx6q")) {
			int mask = (3 << 19);
			int val;
			  
			if (sensor->csi != sensor->ipu_id) {
				pr_warning("%s: csi_id(%d) != ipu_id(%d)\n", __func__, sensor->csi, sensor->ipu_id);
				return -ENODEV;
			}

			if(sensor->csi==1)	// comparison between pointer and integer lines
			{
			  printk(KERN_INFO "%s: sensor->csi = %d\n", __func__,sensor->csi);	
			  val= (1<<20) ;
			}
			else
                          val= (1<<19); 
			
			printk(KERN_INFO "%s: syscon_regmap_lookup: mask:%x %x\n", __func__,mask,val);
			regmap_update_bits(gpr, IOMUXC_GPR1, val, val);
			
		} else if (of_machine_is_compatible("fsl,imx6dl")) {
			int mask = &PIV7D9008_data.csi ? (7 << 3) : (7 << 0);
			int val =  &PIV7D9008_data.csi ? (4 << 3) : (4 << 0);

			regmap_update_bits(gpr, IOMUXC_GPR13, mask, val);
		}
	} else {
		printk(KERN_ERR "%s: failed to find fsl,imx6q-iomux-gpr regmap\n", __func__);
	}

	printk(KERN_INFO "%s IPU/CSI attached.  Allocating Device\n", __func__);
	clk_disable_unprepare(PIV7D9008_data.sensor_clk);

	PIV7D9008_int_device.priv = &PIV7D9008_data;

	printk(KERN_INFO "%s Allocated to PIV7D9008_int_device. Attempting device registration\n", __func__);
	retval = v4l2_int_device_register(&PIV7D9008_int_device);

	printk(KERN_INFO "%s PIV7D9008 Registered Successfully\n", __func__);

	printk(KERN_INFO "%s: Current Status 0x%04X\n",__func__,piv7d9008_read(0x00 + (HL_VID_INPUT_CH << 4) ) );
	//PI7VD9008_page_select(1);
	printk(KERN_INFO "%s:    Video Detect 0x%04X\n",__func__,piv7d9008_read(0x0E  +(HL_VID_INPUT_CH << 4) )); 
	printk(KERN_INFO "%s:    Video Recogn 0x%04X\n",__func__,piv7d9008_read(0x0F +(HL_VID_INPUT_CH << 4) ));

	if(piv7d9008_read(0x00+ (HL_VID_INPUT_CH << 4)) & 0x01){
		printk(KERN_INFO "%s:    Detected 50Hz\n",__func__);
		//PIV7D9008_data.streamcap.timeperframe.denominator = MIN_FPS;
		PIV7D9008_update_fps(MIN_FPS);
	} else {
		printk(KERN_INFO "%s:    Detected 60Hz\n",__func__);
		//PIV7D9008_data.streamcap.timeperframe.denominator = MAX_FPS;
		PIV7D9008_update_fps(MAX_FPS);
	}
	//PI7VD9008_page_select(0);
	return retval;
}

static int PIV7D9008_update_fps(int newFPS){
	int retval = 0;

	PIV7D9008_data.streamcap.timeperframe.denominator = newFPS;

	if(newFPS == MIN_FPS){
		// switch to PAL mode
		printk(KERN_INFO "%s: Switching to PAL mode\n",__func__);
		//PIV7D9008_change_video_mode(0x01);		// Set all to NTSC
		PIV7D9008_set_comp_mode(0x01);
		retval = 0x01;
		// Update the frame size and rates!
		//PIV7D9008_data.channel[ch].curr_std
		PIV7D9008_data.pix.width = video_fmts[PIV7D9008_data.channel[HL_VID_INPUT_CH].curr_std].raw_width;
		PIV7D9008_data.pix.height = video_fmts[PIV7D9008_data.channel[HL_VID_INPUT_CH].curr_std].raw_height;
	} else {
		// switch to NTSC mode
		//PIV7D9008_change_video_mode(0x00);		// Set all to NTSC
		printk(KERN_INFO "%s: Switching to NTSC mode\n",__func__);
		//PIV7D9008_change_video_mode(0x00);		// Set all to NTSC
		PIV7D9008_set_comp_mode(0x00);
		PIV7D9008_data.pix.width = video_fmts[PIV7D9008_data.channel[HL_VID_INPUT_CH].curr_std].raw_width;
		PIV7D9008_data.pix.height = video_fmts[PIV7D9008_data.channel[HL_VID_INPUT_CH].curr_std].raw_height;
	}
	printk(KERN_INFO "%s: Frame Rate: %d/%d\n", __func__, PIV7D9008_data.streamcap.timeperframe.denominator, PIV7D9008_data.streamcap.timeperframe.numerator);

	return retval;
}

/* ---------------------- REMOVE ------------------------------------ */
/*!
 * PIV7D9008 I2C detach function.
 * Called on rmmod.
 *
 *  @param *client	struct i2c_client*.
 *
 *  @return		Error code indicating success or failure.
 */
static int PIV7D9008_remove(struct i2c_client *client)
{
	/*
	struct v4l2_subdev *sd = i2c_get_clientdata(client);
	struct PIV7D9008_state *state = to_state(sd);
	*/
	dev_dbg(&PIV7D9008_data.i2c_client->dev,
		"%s:Removing %s video decoder @ 0x%02X from adapter %s\n",
		__func__, "adv7180", client->addr << 1, client->adapter->name);

	v4l2_int_device_unregister(&PIV7D9008_int_device);

	/*
	cancel_delayed_work(&PIV7D9008_data->delayed_work_enable_hotplug);
	destroy_workqueue(PIV7D9008_data->work_queues);
	v4l2_device_unregister_subdev(PIV7D9008_data);
	media_entity_cleanup(&sd->entity);
	PIV7D9008_unregister_clients(to_state(sd));
	v4l2_ctrl_handler_free(sd->ctrl_handler);
	kfree(to_state(sd));
	*/
	return 0;
}


/* ---------------------- INIT ------------------------------------ */
/*!
 * PIV7D9008 init function.
 * Called on insmod.
 *
 * @return    Error code indicating success or failure.
 */
static int mxc_v4l2_PIV7D9008_i2c_init(void)
{
	u8 err = 0;

	pr_debug("In PIV7D9008_init\n");
	printk(KERN_INFO "PIV7D9008_init\n");

	/* Tells the i2c driver what functions to call for this driver. */
	err = i2c_add_driver(&PIV7D9008_i2c_driver);
	if (err != 0)
		pr_err("%s:driver registration failed, error=%d\n",
			__func__, err);

	return err;
}

/* ---------------------- CLEANUP I2C driver -------------------------------- */
/*!
 * PIV7D9008 cleanup function.
 * Called on rmmod.
 *
 * @return   Error code indicating success or failure.
 */
static void mxc_v4l2_PIV7D9008_i2c_clean(void)
{
	//struct PIV7D9008_state *state = to_state(sd);
	//v4l2_int_device_unregister(&PIV7D9008_int_device);
	printk(KERN_INFO "PIV7D9008_clean\n");

	dev_dbg(&PIV7D9008_data.i2c_client->dev, "In PIV7D9008_clean\n");
	i2c_del_driver(&PIV7D9008_i2c_driver);
}

/* ------------------- DRIVER DECLARATION --------------------------------- */

//module_init(mxc_v4l2_PIV7D9008_i2c_init);
//module_exit(mxc_v4l2_PIV7D9008_i2c_clean);
module_i2c_driver(PIV7D9008_i2c_driver);

MODULE_AUTHOR("John Reep <john.reep@gmail.com>");
MODULE_DESCRIPTION("PIV7D9008 Camera Driver");
MODULE_LICENSE("GPL");
MODULE_VERSION("1.1");
MODULE_ALIAS("CSI");


